#!/usr/bin/python

# -*- coding: utf-8 -*-
################################################################################
# Copyright (c) 2019 University of Utah Student Computing Labs.
# All Rights Reserved.
#
# Author: Thackery Archuletta
# Creation Date: Oct 2018
# Last Updated: Feb 2019
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appears in all copies and
# that both that copyright notice and this permission notice appear
# in supporting documentation, and that the name of The University
# of Utah not be used in advertising or publicity pertaining to
# distribution of the software without specific, written prior
# permission. This software is supplied as is without expressed or
# implied warranties of any kind.
################################################################################

import os
import inspect
from management_tools import loggers
import subprocess
import webbrowser


class JssDoc(object):
    """Creates a document by querying the JSS for a given computer and by using the "incorrect" fields stored
    in Computer."""

    def __init__(self, jss_server, computer, filename="barcode_1"):
        """Initialize JssDoc.

        Args:
            jss_server (JssServer): JSS server to query.
            computer (Computer): Contains information about the computer.
            filename (str): Indicates how the file will be named.
        """
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Set computer and server.
        self.jss_server = jss_server
        self.computer = computer
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get home path.
        self.home = os.path.expanduser("~")
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get path to Python script.
        blade_runner_dir = os.path.dirname(abs_file_path)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Set path to docs generated by JssDoc.
        self.docs_dir = os.path.join(blade_runner_dir, "generated_jss_docs")
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Set the basename of the output file without an extension
        if filename == "barcode_1":
            lbasename = self.jss_server.get_barcode_1(self.computer.jss_id) + "_barcode_1"
        elif filename == "barcode_2":
            lbasename = self.jss_server.get_barcode_2(self.computer.jss_id) + "_barcode_2"
        elif filename == "asset_tag":
            lbasename = self.jss_server.get_asset_tag(self.computer.jss_id) + "_asset"
        elif filename == "serial_number":
            lbasename = self.jss_server.get_serial(self.computer.jss_id) + "_serial"
        elif filename == "name":
            lbasename = self.jss_server.get_name(self.computer.jss_id) + "_name"
        else:
            lbasename = ""
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Set the absolute path to the generated file without an extension
        self.lbasename_abs = os.path.join(self.docs_dir, lbasename)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Append the extensions
        self.html_doc = "{}.html".format(self.lbasename_abs)
        self.pdf_doc = "{}.pdf".format(self.lbasename_abs)

    def create_html(self):
        """Creates an .html JSS document.

        Returns:
            void
        """
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get the name from the previous computer name extension attribute.
        # TODO Remove. This is MacGroup only.
        prev_name = self.jss_server.get_prev_name(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get the name of the computer.
        name = self.jss_server.get_name(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get the barcode of the computer.
        barcode_1 = self.jss_server.get_barcode_1(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get the barcode of the computer.
        barcode_2 = self.jss_server.get_barcode_2(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get the computer's asset tag.
        asset_tag = self.jss_server.get_asset_tag(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get computer's drive capacity
        drive_capacity = self.jss_server.get_drive_capacity(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get computer model.
        computer_model = self.jss_server.get_model(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get SSD status.
        if "SSD" in computer_model or "OWC" in computer_model:
            has_ssd = "Yes"
        else:
            has_ssd = "No"
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Gets computer's total RAM
        ram_total = self.jss_server.get_ram(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get managed status.
        managed = self.jss_server.get_managed_status(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Get serial number.
        serial_number = self.jss_server.get_serial(self.computer.jss_id)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Make directory for the generated JSS document if it doesn't exist.
        try:
            os.makedirs(self.docs_dir)
        except OSError as e:
            # Errno 17 is "Directory exists".
            if e.errno != 17:
                raise
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Lambda expression for filtering out None and replacing it with "".
        none_filter = lambda x : "" if x is None else x
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Build review HTML string.
        review = False
        # Review content string will be built and used only if one of the "incorrect" fields is not None.
        review_content = """<b>Review these to fix any JSS inconsistencies.</b>"""
        # Check if any field needs to be reviewed.
        if self.computer.incorrect_barcode_1:
            review = True
            review_content += """
            <p>
            <b>Previous barcode 1: </b> <font color="red">{0}</font>
            """.format(none_filter(self.computer.incorrect_barcode_1))
        if self.computer.incorrect_barcode_2:
            review = True
            review_content += """
            <p>
            <b>Previous barcode 2: </b> <font color="red">{0}</font>
            """.format(none_filter(self.computer.incorrect_barcode_2))
        if self.computer.incorrect_asset:
            review = True
            review_content += """
            <p>
            <b>Previous asset tag: </b> <font color="red">{0}</font>
            """.format(none_filter(self.computer.incorrect_asset))
        if self.computer.incorrect_serial:
            review = True
            review_content += """
            <p>
            <b>Previous serial: </b> <font color="red">{0}</font>
            """.format(none_filter(self.computer.incorrect_serial))
        # If there's nothing to review, set review_content to empty string.
        if not review:
            review_content = ""
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Build HTML string
        file_content = """
        <!DOCTYPE HTML PUBLIC " -//W3C//DTD HTML 4.01 Transition//EN" 
        "http://www.w3.org/TR/htm14/loose.dtd">
        <html>
          <head>
            <title>Inventory</title>
            <link rel="stylesheet" href="myCs325Style.css" type="text/css"/>
          </head>
          <body>
            <font size="5">
            <b>New Name: </b> """ + name + """
            <p>
            <b>Previous Name: </b> """ + prev_name + """
            <p>
            <b>Barcode 1: </b> """ + barcode_1 + """
            <p>
            <b>Barcode 2: </b> """ + barcode_2 + """
            <p>
            <b>Asset: </b> """ + asset_tag + """
            <p>
            <b>JSS ID: </b> """ + self.computer.jss_id + """    <b>Managed: </b> """ + managed + """
            <p>
            <b>Serial Number: </b> """ + serial_number + """
            <p>
            <b>Model: </b> """ + computer_model + """
            <p>
            <b>SSD: </b> """ + has_ssd + """    <b>RAM: </b> """ + ram_total + """
            <b>Storage: </b> """ + drive_capacity + """
            <p>
            """ + review_content + """
            </font>
          </body>
        </html>"""
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Create HTML document.
        with open(self.html_doc, "w+") as f:
            f.write(file_content)

    def open_html(self):
        """Open the html file in Safari.

        Returns:
            void
        """
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        logger.info("open_html: started")
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        try:# open HTML file in Safari.
            webbrowser.get('macosx').open("file://" + self.html_doc)
        except Exception as e:
            logger.error("Couldn't open webrowser. {}".format(e))
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        logger.info("open_html: finished")

    def html_to_pdf(self):
        """Convert HTML file to PDF. Prints only the first page, which is the "-P 1" option.

        Returns:
            void
        """
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        logger.info("Converting HTML to PDF")
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        try:# convert HTML to PDF.
            with open(self.pdf_doc, 'w+') as pdfout:
                subprocess.call(['/usr/sbin/cupsfilter', "-P", "1", self.html_doc], stdout=pdfout,
                                stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            logger.error(e.output)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        logger.info("Converting HTML to PDF finished.")

    def print_pdf_to_default(self):
        """Print PDF file to default printer.

        Returns:
            void
        """
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        logger.info("print_pdf_to_default: started")
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Build AppleScript to print PDF to default printer from Preview.
        script = r'''
        set theFile to POSIX path of "{}"
        do shell script("open " & theFile) 
        tell application "Preview"
            delay 2
            print the front document
        end tell
                '''.format(self.pdf_doc)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        # Write AppleScript text to a bash file.
        with open("/tmp/print.sh", "w+") as f:
            f.write(script)
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        try:# run the AppleScript with osascript.
            cmd = ['/usr/bin/osascript', '/tmp/print.sh']
            subprocess.check_output(cmd, stderr=subprocess.STDOUT)
            logger.info("Print successful.")
            # Append file name with "printed".
            os.rename(self.pdf_doc, "{}_printed.pdf".format(self.lbasename_abs))
        except subprocess.CalledProcessError as e:
            logger.error(str(e.output))
            logger.error("Document didn't print. Make sure a default printer has been configured.")
        # <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
        logger.info("print_pdf_to_default: finished")


cf = inspect.currentframe()
abs_file_path = inspect.getframeinfo(cf).filename
basename = os.path.basename(abs_file_path)
lbase = os.path.splitext(basename)[0]
logger = loggers.FileLogger(name=lbase, level=loggers.DEBUG)